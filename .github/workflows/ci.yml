name: CI

on:
  push:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  tests:
    name: Run tests
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    - name: Create dotenv
      uses: iamsauravsharma/create-dotenv@v1.2.1
      env:
        FLASK_AUTH_SECRET: "${{ secrets.FLASK_AUTH_SECRET }}"
        DISCORD_CLIENT_ID: "${{ secrets.DISCORD_CLIENT_ID }}"
        DISCORD_CLIENT_SECRET: "${{ secrets.DISCORD_CLIENT_SECRET }}"
        DISCORD_BOT_TOKEN: "${{ secrets.DISCORD_BOT_TOKEN }}"
        DISCORD_REDIRECT_URI: "${{ secrets.DISCORD_REDIRECT_URI }}"
        DISCORD_GUILD_NAME: "Club JDR TEST"
        POSTGRES_USER: "clubjdr"
        POSTGRES_PASSWORD: "${{ secrets.POSTGRES_PASSWORD }}"
        POSTGRES_DB: "clubjdr"
        POSTGRES_HOST: "db"
        UNITTEST_CHANNEL_ID: "${{ secrets.UNITTEST_CHANNEL_ID }}"
        CATEGORIES_CHANNEL_ID: "${{ secrets.CATEGORIES_CHANNEL_ID }}"
        DISCORD_GUILD_ID: "${{ secrets.DISCORD_GUILD_ID }}"
        FLASK_APP: "api"
    - name: Build the api
      run: docker-compose build
    - name: Run the stack
      run: docker-compose down && docker-compose up -d db api
    - name: Ensure API is running
      run:  "sleep 10 && curl -s -X 'GET' 'http://localhost:8000/health/' -H 'accept: application/json'"
    - name: Init the database and run the migrations
      run: docker exec questmaster_api_1 bash -c "flask db init && flask db migrate && flask db upgrade"
    - name: Lint with Black
      run: |
        docker-compose run api-test black --check questmaster.py api
    - name: Tests with Pytest
      run: |
        docker-compose run api-test python -m pytest tests/ --cov api --cov-report xml:test-results/coverage.xml --junitxml=test-results/junit.xml
    - name: Fix code coverage paths
      run: |
        pwd && ls -al test-results/ && sudo sed -i 's#/home/runner/work/questmaster/questmaster/#/github/workspace/#g' test-results/coverage.xml
    - name: SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
    - name: Stop the stack
      run: docker-compose down
