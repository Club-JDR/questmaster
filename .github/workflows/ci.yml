name: CI

on:
  push:
    branches:
      - "main"
    tags:
      - '*'
  pull_request:
    types: [opened, synchronize, reopened]

env:
  IMAGE_NAME: ghcr.io/club-jdr/questmaster
    
jobs:
  tests:
    name: Run Tests
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Create .env file
        uses: iamsauravsharma/create-dotenv@v1.2.2
        env:
          FLASK_AUTH_SECRET: ${{ secrets.FLASK_AUTH_SECRET }}
          DISCORD_CLIENT_ID: ${{ secrets.DISCORD_CLIENT_ID }}
          DISCORD_CLIENT_SECRET: ${{ secrets.DISCORD_CLIENT_SECRET }}
          DISCORD_BOT_TOKEN: ${{ secrets.DISCORD_BOT_TOKEN }}
          DISCORD_REDIRECT_URI: ${{ secrets.DISCORD_REDIRECT_URI }}
          DISCORD_GUILD_NAME: "Club JDR TEST"
          POSTGRES_USER: "clubjdr"
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: "clubjdr"
          POSTGRES_HOST: "db"
          REDIS_HOST: "redis"
          UNITTEST_CHANNEL_ID: ${{ secrets.UNITTEST_CHANNEL_ID }}
          POSTS_CHANNEL_ID: ${{ secrets.POSTS_CHANNEL_ID }}
          DISCORD_GUILD_ID: ${{ secrets.DISCORD_GUILD_ID }}
          DISCORD_GM_ROLE_ID: ${{ secrets.DISCORD_GM_ROLE_ID }}
          DISCORD_ADMIN_ROLE_ID: ${{ secrets.DISCORD_ADMIN_ROLE_ID }}
          DISCORD_PLAYER_ROLE_ID: ${{ secrets.DISCORD_PLAYER_ROLE_ID }}
          FLASK_APP: "website"

      - name: Start required services
        run: docker compose up -d db redis

      - name: Build Docker image
        run: docker compose build app

      - name: Save Docker image
        run: docker save $IMAGE_NAME -o app-image.tar

      - name: Upload Docker image artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-image
          path: app-image.tar

      - name: Wait for services
        run: sleep 5

      - name: Check app health
        run: |
          docker compose up -d app
          sleep 5
          curl -4 -s -X GET http://localhost:8000/health/ -H "accept: application/json" || docker logs questmaster-app-1

      - name: Lint with Black
        run: docker compose run --rm app-test black --check questmaster.py website

      - name: Run tests with coverage
        run: |
          docker compose run \
            --rm \
            --volume "$(pwd)":/github/workspace \
            --workdir /github/workspace \
            app-test \
            python -m pytest tests/ \
              --cov website \
              --cov-report xml:test-results/coverage.xml \
              --junitxml=test-results/junit.xml

      - name: Fix coverage paths for SonarCloud
        run: |
          sudo chmod -R 777 test-results/
          sed -i 's|<source>/github/workspace/website|<source>website|' test-results/coverage.xml

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: Shut down containers
        run: docker compose down

  push-image:
    name: Build & Push Docker Image to GHCR
    runs-on: ubuntu-latest
    needs: tests
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set image tag
        id: meta
        run: |
          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            TAG=${GITHUB_REF#refs/tags/}
          else
            TAG=latest
          fi
          echo "tag=${TAG}" >> $GITHUB_OUTPUT

      - name: Download built image
        uses: actions/download-artifact@v4
        with:
          name: app-image

      - name: Load Docker image
        run: docker load -i app-image.tar

      - name: Push Docker image
        run: |
          docker tag $IMAGE_NAME $IMAGE_NAME:${{ steps.meta.outputs.tag }}
          docker push $IMAGE_NAME:${{ steps.meta.outputs.tag }}
